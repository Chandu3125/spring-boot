

### Step 1: Create a Spring Boot Project

1. **Go to Spring Initializr**: Visit [start.spring.io](https://start.spring.io/).
2. **Project Metadata**:
   - **Project**: Maven Project
   - **Language**: Java
   - **Spring Boot**: 2.7.13
   - **Group**: `com.chandu`
   - **Artifact**: `batch-processing-demo`
   - **Package Name**: `com.chandu.batchprocessingdemo`
   - **Packaging**: Jar
   - **Java**: 1.8

3. **Add Dependencies**:
   - Spring Web
   - Spring Batch
   - Spring Data JPA
   - H2 Database
   - Lombok

4. **Generate the Project**: Click "Generate" to download the zip file. Extract it to your desired location.

### Step 2: Set Up Your Project in IntelliJ

1. **Open IntelliJ IDEA**.
2. **Import the project**: Go to `File -> Open`, select the extracted folder, and open it as a Maven project.
3. **Enable Lombok**: Make sure you have the Lombok plugin enabled in IntelliJ (`File -> Settings -> Plugins` and search for Lombok).

### Step 3: Update the `pom.xml`

Hereâ€™s the `pom.xml` file with the required dependencies:

```xml
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>com.chandu</groupId>
    <artifactId>batch-processing-demo</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <packaging>jar</packaging>

    <name>batch-processing-demo</name>
    <description>Demo project for Spring Batch</description>

    <properties>
        <java.version>1.8</java.version>
        <spring.boot.version>2.7.13</spring.boot.version>
    </properties>

    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-batch</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>
        <dependency>
            <groupId>com.h2database</groupId>
            <artifactId>h2</artifactId>
            <scope>runtime</scope>
        </dependency>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <optional>true</optional>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
        </plugins>
    </build>
</project>
```

### Step 4: Configure Application Properties

Create an `application.properties` file in the `src/main/resources` directory with the following content:

```properties
spring.h2.console.enabled=true
spring.datasource.url=jdbc:h2:mem:testdb
spring.datasource.driver-class-name=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=password
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
spring.batch.initialize-schema=always
logging.level.org.springframework.batch=DEBUG
```

### Step 5: Create the CSV File

Create a CSV file named `customers.csv` in the `src/main/resources` directory with 30+ records. Here's a sample format for the first few lines:

```
customerId,customerName,lastName,DOB,phone,email
1,John,Doe,01011990,1234567890,john.doe@example.com
2,Jane,Smith,02021991,0987654321,jane.smith@example.com
3,Bob,Johnson,03031992,1122334455,bob.johnson@example.com
...
```

### Step 6: Create Entity, Repository, and Job Configuration

1. **Create an Entity Class**: Create a new class `Customer.java` in the `com.chandu.batchprocessingdemo.entity` package.

```java
package com.chandu.batchprocessingdemo.entity;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import javax.persistence.Entity;
import javax.persistence.Id;

@Data
@Entity
@NoArgsConstructor
@AllArgsConstructor
public class Customer {
    @Id
    private Long customerId;
    private String customerName;
    private String lastName;
    private String dob; // Format: ddMMyyyy
    private String phone;
    private String email;
}
```

2. **Create a Repository Interface**: Create a new interface `CustomerRepository.java` in the `com.chandu.batchprocessingdemo.repository` package.

```java
package com.chandu.batchprocessingdemo.repository;

import com.chandu.batchprocessingdemo.entity.Customer;
import org.springframework.data.jpa.repository.JpaRepository;

public interface CustomerRepository extends JpaRepository<Customer, Long> {
    boolean existsByCustomerId(Long customerId);
}
```

3. **Batch Configuration**: Create a configuration class `BatchConfig.java` in the `com.chandu.batchprocessingdemo.config` package.

```java
package com.chandu.batchprocessingdemo.config;

import com.chandu.batchprocessingdemo.entity.Customer;
import com.chandu.batchprocessingdemo.repository.CustomerRepository;
import org.springframework.batch.core.Step;
import org.springframework.batch.core.configuration.annotation.EnableBatchProcessing;
import org.springframework.batch.core.configuration.annotation.JobBuilderFactory;
import org.springframework.batch.core.configuration.annotation.StepBuilderFactory;
import org.springframework.batch.core.launch.support.RunIdIncrementer;
import org.springframework.batch.core.step.builder.StepBuilder;
import org.springframework.batch.core.StepExecutionListener;
import org.springframework.batch.core.Job;
import org.springframework.batch.item.ItemProcessor;
import org.springframework.batch.item.ItemReader;
import org.springframework.batch.item.ItemWriter;
import org.springframework.batch.item.file.FlatFileItemReader;
import org.springframework.batch.item.file.LineMapper;
import org.springframework.batch.item.file.mapping.DefaultLineMapper;
import org.springframework.batch.item.file.transform.DelimitedLineTokenizer;
import org.springframework.batch.item.file.transform.FieldSet;
import org.springframework.batch.item.file.transform.LineMapper;
import org.springframework.batch.item.file.transform.FieldSetMapper;
import org.springframework.batch.item.file.transform.PassThroughLineAggregator;
import org.springframework.batch.item.file.builder.FlatFileItemReaderBuilder;
import org.springframework.batch.item.file.builder.FlatFileItemWriterBuilder;
import org.springframework.batch.core.step.skip.AlwaysSkipItemSkipPolicy;
import org.springframework.core.io.ClassPathResource;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.stereotype.Component;

import java.util.List;

@EnableBatchProcessing
@Component
public class BatchConfig {

    @Autowired
    private JobBuilderFactory jobBuilderFactory;

    @Autowired
    private StepBuilderFactory stepBuilderFactory;

    @Autowired
    private CustomerRepository customerRepository;

    @Bean
    public Job importUserJob() {
        return jobBuilderFactory.get("importUserJob")
                .incrementer(new RunIdIncrementer())
                .flow(step1())
                .end()
                .build();
    }

    @Bean
    public Step step1() {
        return stepBuilderFactory.get("step1")
                .<Customer, Customer>chunk(10)
                .reader(reader())
                .processor(processor())
                .writer(writer())
                .faultTolerant()
                .skipPolicy(new AlwaysSkipItemSkipPolicy())
                .build();
    }

    @Bean
    public ItemReader<Customer> reader() {
        FlatFileItemReader<Customer> reader = new FlatFileItemReader<>();
        reader.setResource(new ClassPathResource("customers.csv"));
        reader.setLineMapper(lineMapper());
        return reader;
    }

    @Bean
    public LineMapper<Customer> lineMapper() {
        DefaultLineMapper<Customer> lineMapper = new DefaultLineMapper<>();
        DelimitedLineTokenizer lineTokenizer = new DelimitedLineTokenizer();
        lineTokenizer.setNames("customerId", "customerName", "lastName", "dob", "phone", "email");

        lineMapper.setLineTokenizer(lineTokenizer);
        lineMapper.setFieldSetMapper(new FieldSetMapper<Customer>() {
            @Override
            public Customer mapFieldSet(FieldSet fieldSet) {
                return new Customer(
                        fieldSet.readLong("customerId"),
                        fieldSet.readString("customerName"),
                        fieldSet.readString("lastName"),
                        fieldSet.readString("dob"),
                        fieldSet.readString("phone"),
                        fieldSet.readString("email")
                );
            }
        });

        return lineMapper;
    }

    @Bean
    public ItemProcessor<Customer, Customer> processor() {
        return customer -> {
            if (!customerRepository.exists

ByCustomerId(customer.getCustomerId())) {
                return customer; // New record to be inserted
            }
            return null; // Skip existing records
        };
    }

    @Bean
    public ItemWriter<Customer> writer() {
        return items -> {
            for (Customer customer : items) {
                customerRepository.save(customer);
            }
        };
    }
}
```

### Step 7: Create the Application Entry Point

Create a new class `BatchProcessingDemoApplication.java` in the `com.chandu.batchprocessingdemo` package.

```java
package com.chandu.batchprocessingdemo;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class BatchProcessingDemoApplication {
    public static void main(String[] args) {
        SpringApplication.run(BatchProcessingDemoApplication.class, args);
    }
}
```

### Step 8: Run the Application

1. **Build the Project**: In IntelliJ, click on the "Maven" tool window, then click on "Reload All Maven Projects".
2. **Run the Application**: Right-click on `BatchProcessingDemoApplication.java` and select "Run 'BatchProcessingDemoApplication.main()'".

### Step 9: Access H2 Console

After running the application, access the H2 console by navigating to:

```
http://localhost:8080/h2-console
```

Use the following settings to log in:
- **JDBC URL**: `jdbc:h2:mem:testdb`
- **User Name**: `sa`
- **Password**: `password`

### Step 10: Verify the Data

You can run a simple query to check if the customers were inserted correctly:

```sql
SELECT * FROM customer;
```

### Conclusion

You now have a Spring Boot application that reads customer records from a CSV file, processes them with Spring Batch, and stores them in an H2 database. If the customer already exists based on the ID, it skips the insertion. You can expand the functionality as needed!

If you have any questions or need further assistance, feel free to ask!
